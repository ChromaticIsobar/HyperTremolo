# Based on workflow at
# https://github.com/jatinchowdhury18/plugin-ci-example/blob/a2b34a2ee67c58adb4f26bdf0710f32da38fb4d9/.github/workflows/projucer.yml

# BSD 3-Clause License
#
# Copyright (c) 2020, jatinchowdhury18
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its
#    contributors may be used to endorse or promote products derived from
#    this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
name: Projucer CI/CD

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  build:
    if: ${{ !contains(github.event.head_commit.message, '[CI SKIP]') }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        platform: ["", Win32, x64]
        exclude:
          - os: ubuntu-latest
            platform: Win32
          - os: ubuntu-latest
            platform: x64
          - os: macos-latest
            platform: Win32
          - os: macos-latest
            platform: x64
          - os: windows-latest
            platform: ""
        include:
          - os: ubuntu-latest
            jucer: "JUCE/extras/Projucer/Builds/LinuxMakefile/build/Projucer"
            jucer_buildir: "JUCE/extras/Projucer/Builds/LinuxMakefile"
            plugin_buildir: "Builds/LinuxMakefile"
            build_cmd: make -j4
            build_prefix: "build"
            label: linux
          - os: macos-latest
            jucer: "JUCE/extras/Projucer/Builds/MacOSX/build/Release/Projucer.app/Contents/MacOS/Projucer"
            jucer_buildir: "JUCE/extras/Projucer/Builds/MacOSX"
            plugin_buildir: "Builds/MacOSX"
            build_cmd: xcodebuild -project *.xcodeproj -jobs 4 -configuration Release -alltargets | xcpretty
            build_prefix: "build/Release"
            standalone_ext: .app
            label: macos
          - os: windows-latest
            jucer: "JUCE/extras/Projucer/Builds/VisualStudio2019/x64/Release/App/Projucer.exe"
            jucer_buildir: "JUCE/extras/Projucer/Builds/VisualStudio2019"
            plugin_buildir: "Builds/VisualStudio2019"
            build_cmd: msbuild.exe -m:4 *.sln /property:Configuration=Release
            standalone_ext: .exe
            standalone_prefix: "Standalone Plugin/"
            vst3_prefix: "VST3/"
          - platform: x64
            win_plt_property: /property:Platform=x64
            build_prefix: "x64/Release"
            label: win64
          - platform: Win32
            win_plt_property: /property:Platform=Win32
            build_prefix: "Win32/Release"
            label: win32
    runs-on: ${{ matrix.os }}
    name: ${{ matrix.label }}

    steps:
    - name: Install Linux Deps
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt install libasound2-dev libcurl4-openssl-dev libx11-dev libxinerama-dev libxext-dev libfreetype6-dev libwebkit2gtk-4.0-dev libglu1-mesa-dev libjack-jackd2-dev lv2-dev
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 9
        sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-9 9

    - name: Add msbuild to PATH
      if: runner.os == 'Windows'
      uses: microsoft/setup-msbuild@v1.0.3

    - name: Set up Xcode
      if: runner.os == 'MacOS'
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable

    - uses: actions/checkout@v2
      with:
        submodules: true

    - name: Build Projucer
      shell: bash
      run: ${{ matrix.build_cmd }}
      working-directory: ${{ matrix.jucer_buildir }}

    - name: Log jucer project status
      shell: bash
      run: ${{ matrix.jucer }} --status *.jucer

    - name: Save jucer project version
      id: plugin-version
      if: runner.os == 'Linux'
      shell: bash
      run: echo '::set-output name=PLUGIN_VERSION::'$('${{ matrix.jucer }}' --get-version *.jucer)

    - name: Resave jucer file
      shell: bash
      run: ${{ matrix.jucer }} --resave *.jucer

    - name: Build Plugin
      shell: bash
      run: ${{ matrix.build_cmd }} ${{ matrix.win_plt_property }}
      working-directory: ${{ matrix.plugin_buildir }}

    - name: List artifacts in build directory
      shell: bash
      run: ls -l
      working-directory: ${{ matrix.plugin_buildir }}/${{ matrix.build_prefix }}

    - name: Move AU artifacts
      if: runner.os == 'MacOS'
      run: ./scripts/nest -cd ${{ matrix.plugin_buildir }}/${{ matrix.build_prefix }}/${{ matrix.au_prefix }}HyperTremolo.component

    - name: Move VST3 artifacts
      run: ./scripts/nest -cd ${{ matrix.plugin_buildir }}/${{ matrix.build_prefix }}/${{ matrix.vst3_prefix }}HyperTremolo.vst3

    - name: Move Standalone artifacts
      run: ./scripts/nest -cd ${{ matrix.plugin_buildir }}/${{ matrix.build_prefix }}/${{ matrix.standalone_prefix }}HyperTremolo${{ matrix.standalone_ext }}

    - name: Upload AU
      if: runner.os == 'MacOS'
      uses: actions/upload-artifact@v2
      with:
        name: HyperTremolo_${{ matrix.label }}_au
        path: ${{ matrix.plugin_buildir }}/${{ matrix.build_prefix }}/${{ matrix.au_prefix }}HyperTremolo.component

    - name: Upload VST3
      uses: actions/upload-artifact@v2
      with:
        name: HyperTremolo_${{ matrix.label }}_vst3
        path: ${{ matrix.plugin_buildir }}/${{ matrix.build_prefix }}/${{ matrix.vst3_prefix }}HyperTremolo.vst3

    - name: Upload Standalone
      uses: actions/upload-artifact@v2
      with:
        name: HyperTremolo_${{ matrix.label }}_standalone
        path: ${{ matrix.plugin_buildir }}/${{ matrix.build_prefix }}/${{ matrix.standalone_prefix }}HyperTremolo${{ matrix.standalone_ext }}

    outputs:
      plugin_version: ${{ steps.plugin-version.outputs.PLUGIN_VERSION }}

  build-docs:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: false

    - uses: actions/setup-node@v2

    - name: Install converter
      run: npm install mdpdf -g

    - name: Checkout gist
      run: git clone https://gist.github.com/6ce8126b4bc9a02594282bde2909f02b.git gist

    - name: Checkout gist tag
      run: git checkout v${{ needs.build.outputs.plugin_version }}
      working-directory: gist
      continue-on-error: true

    - name: Save gists version sha
      id: gist-version
      run: echo '::set-output name=GIST_VERSION::'$(git rev-parse HEAD)
      working-directory: gist

    - name: Make input file
      run: |
        ./scripts/preprocess_readme ${{ steps.gist-version.outputs.GIST_VERSION }} ${{ needs.build.outputs.plugin_version }} > docs/README.md

    - name: Upload input file
      uses: actions/upload-artifact@v2
      with:
        name: README_frozen
        path: docs/README.md

    - name: Convert
      run: mdpdf README.md HyperTremolo_UserManual.pdf --orientation=landscape --gh-style --style README.css
      working-directory: docs

    - uses: actions/upload-artifact@v2
      with:
        name: HyperTremolo_UserManual
        path: docs/HyperTremolo_UserManual.pdf

    outputs:
      gist_version: ${{ steps.gist-version.outputs.GIST_VERSION }}

  release:
    if: ${{ contains(github.event.head_commit.message, '[RELEASE]') || contains(github.event.head_commit.message, '[PRERELEASE]') }}
    runs-on: ubuntu-latest
    needs: [build, build-docs]

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: false

    - uses: actions/download-artifact@v2
      with:
        path: artifacts

    - name: List artifacts
      run: tree artifacts

    - name: Create assets folder
      run: mkdir assets

    - name: Prepare folder for LIM Plugin Collection Specs zip file
      run: mkdir -p collection/Windows/Win32 collection/Windows/x64 collection/MacOS collection/Linux

    - name: Copy changelog to zip folder
      run: cp Changelog.txt collection

    - name: Copy manual to assets
      run: |
        cp artifacts/HyperTremolo_UserManual/HyperTremolo_UserManual.pdf \
           assets/HyperTremolo_UserManual_v${{ needs.build.outputs.plugin_version }}.pdf

    - name: Copy manual to zip folder
      run: cp assets/HyperTremolo_UserManual*.pdf collection

    - name: Compress assets
      working-directory: artifacts
      run: |
        for d in HyperTremolo_*_* ; do
          cd "${d}"                                                               && \
          dest="../../assets/${d}_v${{ needs.build.outputs.plugin_version }}.zip" && \
          echo zip -r "${dest}" *                                                 && \
          zip -r "${dest}" *                                                      && \
          cd ..
        done;

    - name: Copy assets to zip folder
      run: |
        for d in artifacts/HyperTremolo_*_* ; do
          case "$d" in
            *_linux_*) ZIP_PREFIX="Linux/" ;;
            *_win32_*) ZIP_PREFIX="Windows/Win32/" ;;
            *_win64_*) ZIP_PREFIX="Windows/x64/" ;;
            *_macos_*) ZIP_PREFIX="MacOS/" ;;
            *) ZIP_PREFIX="" ;;
          esac                                                                    && \
          dest="collection/${ZIP_PREFIX}"                                         && \
          echo cp -r "${d}"/* "${dest}"                                           && \
          cp -r "${d}"/* "${dest}"
        done;

    - name: List zip folder
      run: tree collection

    - name: Compress LIM Plugin Collection Specs zip file
      working-directory: collection
      run: zip -r ../assets/HyperTremolo_v${{ needs.build.outputs.plugin_version }}.zip *

    - name: List assets
      run: ls assets

    - name: Initialize relase body file
      run: sed "3q;d" docs/HyperTremolo.txt > RELEASE_BODY.txt

    - name: Add changelog header to release body file
      run: printf "\nChangelog\u003A\n" >> RELEASE_BODY.txt

    - name: Add changelog to release body file
      run: ./scripts/extract_changelog v${{ needs.build.outputs.plugin_version }} | tail -n +2 >> RELEASE_BODY.txt

    - name: Add screenshot to release body file
      run: printf "\n\u0021[Screenshot](https\u003A//gist.githubusercontent.com/ChromaticIsobar/6ce8126b4bc9a02594282bde2909f02b/raw/${{ needs.build-docs.outputs.gist_version }}/HyperTremolo.png)\n" >> RELEASE_BODY.txt

    - uses: actions-ecosystem/action-push-tag@v1
      with:
        tag: v${{ needs.build.outputs.plugin_version }}
        message: ':bookmark: Version ${{ needs.build.outputs.plugin_version }}'

    - name: Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ needs.build.outputs.plugin_version }}
        name: Version ${{ needs.build.outputs.plugin_version }}
        body_path: RELEASE_BODY.txt
        draft: true
        prerelease: ${{ contains(github.event.head_commit.message, '[PRERELEASE]') }}
        files:
          assets/*
